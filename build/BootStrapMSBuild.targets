<Project>

  <!-- 
  Copies the binaries of MSBuild to a bootstrap folder so we can rebuild msbuild with itself.
  On netcore and mono it performs a directory copy.
  On full framework it performs a more involved deployment.
   -->

  <PropertyGroup>
    <BootstrapDestination>$(ArtifactsConfigurationDir)bootstrap\</BootstrapDestination>
    <BootstrapDestination Condition="'$(Platform)' == 'x64'">$(BootstrapDestination)$(Platform)\</BootstrapDestination>
    <BootstrapDestination>$(BootstrapDestination)$(TargetFramework.ToLowerInvariant())\MSBuild\</BootstrapDestination>

    <!-- TODO: Mono build should use BootstrapNetCore logic -->
    <BootstrapDependsOn Condition="$(TargetFramework.StartsWith('net4'))">BootstrapFull</BootstrapDependsOn>
    <BootstrapDependsOn Condition="!$(TargetFramework.StartsWith('net4'))">BootstrapNetCore</BootstrapDependsOn>

    <CreateBootstrap Condition="'$(CreateBootstrap)' == ''">true</CreateBootstrap>
    
  </PropertyGroup>

  <Target Name="Bootstrap" DependsOnTargets="$(BootstrapDependsOn)"
          AfterTargets="AfterBuild"
          Condition="'$(CreateBootstrap)' == 'true'"/>

  <Target Name="CleanBootstrapFolder">
    <!-- This sometimes fails so it might need be retried. -->
    <RemoveDir
            Directories="$(BootstrapDestination)"
            ContinueOnError="true"/>    
  </Target>

  <Target Name="BootstrapFull" DependsOnTargets="CleanBootstrapFolder">

    <ItemGroup>
      <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\*.targets" />
      <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\*.props" />
      <SdkResolverFiles Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Bin\SdkResolvers\**\*.*" />
      <InstalledSdks Include="$(DOTNET_INSTALL_DIR)sdk\$(DotNetCliVersion)\Sdks\**\*.*" />
      <InstalledStaticAnalysisTools Include="$(VsInstallRoot)\Team Tools\Static Analysis Tools\**\*.*" />

      <ShimTargets Include="Microsoft.Data.Entity.targets" />
      <ShimTargets Include="Microsoft.ServiceModel.targets" />
      <ShimTargets Include="Microsoft.WinFx.targets" />
      <ShimTargets Include="Microsoft.WorkflowBuildExtensions.targets" />
      <ShimTargets Include="Microsoft.Xaml.targets" />
      <ShimTargets Include="Workflow.Targets" />
      <ShimTargets Include="Workflow.VisualBasic.Targets" />

      <InstalledMicrosoftExtensions Include="$(MSBuildExtensionsPath)\Microsoft\**\*.*" />

      <InstalledNuGetFiles Include="$(MSBuildExtensionsPath)\Microsoft\NuGet\*" />

      <NuGetCommonExtensions Include="$(VSInstallRoot)\Common7\IDE\CommonExtensions\Microsoft\NuGet\**\*" />

      <FreshlyBuiltBinaries Include="$(OutputPath)**\*.dll" />
      <FreshlyBuiltBinaries Include="$(OutputPath)**\*.exe" />
      <FreshlyBuiltBinaries Include="$(OutputPath)**\*.pdb" />
      <FreshlyBuiltBinaries Include="$(OutputPath)**\*.exe.config" />

      <FreshlyBuiltProjects Include="$(OutputPath)**\*props" />
      <FreshlyBuiltProjects Include="$(OutputPath)**\*targets" />
      <FreshlyBuiltProjects Include="$(OutputPath)**\*tasks" />
    </ItemGroup>

    <!-- Copy in props and targets from the machine-installed MSBuildExtensionsPath -->
    <Copy SourceFiles="@(InstalledVersionedExtensions)"
          DestinationFiles="@(InstalledVersionedExtensions->'$(BootstrapDestination)$(TargetMSBuildToolsVersion)\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(SdkResolverFiles)"
          DestinationFiles="@(SdkResolverFiles->'$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\SdkResolvers\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(InstalledMicrosoftExtensions)"
          DestinationFiles="@(InstalledMicrosoftExtensions->'$(BootstrapDestination)Microsoft\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(InstalledSdks)"
          DestinationFiles="@(InstalledSdks -> '$(BootstrapDestination)Sdks\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(InstalledStaticAnalysisTools)"
          DestinationFiles="@(InstalledStaticAnalysisTools -> '$(BootstrapDestination)..\Team Tools\Static Analysis Tools\%(RecursiveDir)%(Filename)%(Extension)')" />

    <Copy SourceFiles="@(InstalledNuGetFiles)"
          DestinationFiles="@(InstalledNuGetFiles->'$(BootstrapDestination)Microsoft\NuGet\%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(NuGetCommonExtensions)"
          DestinationFiles="@(NuGetCommonExtensions -> '$(BootstrapDestination)..\Common7\IDE\CommonExtensions\Microsoft\NuGet\%(RecursiveDir)%(FileName)%(Extension)')" />

    <!-- Delete shim projects, because they point where we can't follow. -->
    <!-- It would be better to just not copy these. -->
    <Delete Files="@(ShimTargets->'$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\%(FileName)%(Extension)')" />

    <!-- Copy our binaries -->
    <Copy SourceFiles="@(FreshlyBuiltBinaries)"
          DestinationFiles="@(FreshlyBuiltBinaries -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\%(RecursiveDir)%(Filename)%(Extension)')" />

    <!-- Copy our freshly-built props and targets, overwriting anything we copied from the machine -->
    <Copy SourceFiles="@(FreshlyBuiltProjects)"
          DestinationFiles="@(FreshlyBuiltProjects -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

  <!--
    To build a .NET Core app, we need a lot of stuff from the CLI. This target will copy everything from the current one and 
    overwrite what it needs to.
    TODO: We should have another project with the correct dependencies specified and "publish" that to replace this. Similar
    to what the CLI does to create a distributable.
  -->
  <Target Name="BootstrapNetCore" DependsOnTargets="CleanBootstrapFolder">
    <ItemGroup>
      <DeployedItems Include="$(OutputPath)\**\*.*" Exclude="$(OutputPath)\MSBuild.deps.json"/>
      <DotNetCli Include="$(RepoRoot)artifacts\.dotnet\$(DotNetCliVersion)\sdk\$(DotNetCliVersion)\**\*" />
    </ItemGroup>

    <!-- Copy the CLI -->
    <Copy SourceFiles="@(DotNetCli)"
          DestinationFiles="@(DotNetCli->'$(BootstrapDestination)%(RecursiveDir)%(Filename)%(Extension)')" />
    
    <!-- Overwrite stuff we built locally -->
    <Copy SourceFiles="@(DeployedItems)"
          DestinationFolder="$(BootstrapDestination)\%(RecursiveDir)" />
    
    <!-- Not really sure why but we need to have the wrong version of this dll by default -->
    <Copy SourceFiles="$(NuGetPackageRoot)\system.text.encoding.codepages\4.4.0\runtimes\win\lib\netcoreapp2.0\System.Text.Encoding.CodePages.dll"
          DestinationFolder="$(BootstrapDestination)runtimes\win\lib\netstandard1.3\" />
    
    <!-- Microsoft.Portable.CSharp.targets imports this file with a capital T -->
    <Copy SourceFiles="$(OutputPath)\Microsoft.CSharp.targets"
          DestinationFiles="$(BootstrapDestination)\Microsoft.CSharp.Targets" />
  </Target>
</Project>
