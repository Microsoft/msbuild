<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" InitialTargets="_RestoreBuildToolsWrapper" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    Needed to avoid the IntialTargets from having an Output which ends up getting
    added to the output references when you have a project to project reference.
  -->
  <Target Name="_RestoreBuildToolsWrapper" DependsOnTargets="_DisplayBuildInfo" />

  <Target Name="_DisplayBuildInfo">
    <Message Importance="High" Text="Build binary target directory: '$(BaseOutputPathWithConfig)'" />
  </Target>

  <!-- See https://github.com/Microsoft/msbuild/issues/224 -->
  <Target Name="EnsureSDKTargetPresent"
          AfterTargets="_DisplayBuildInfo" >
    <Error Condition="!Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter\Microsoft.NuGet.ImportAfter.targets')" 
      Text="MSBuild depends on the 'Tools and Windows SDK' Visual Studio plugin. Please install it. Reference: https://github.com/Microsoft/msbuild/wiki/Building+Testing+and+Debugging" />
  </Target>

  <Target Name="_CopyCompilers"
          AfterTargets="_RestoreBuildToolsWrapper"
          Condition="Exists($(BuildToolsSemaphore))">
    <ItemGroup>
      <CompilerToolsFiles Include="$(CompilerToolsDir)\*" />
    </ItemGroup>

    <Copy
      SourceFiles="@(CompilerToolsFiles)"
      DestinationFolder="$(OutputPath)"
      SkipUnchangedFiles="true"
    />
  </Target>

  <Target Name="_PrepareNonWindowsRuntime"
          AfterTargets="_CopyCompilers"
          Condition="'$(OsEnvironment)'!='Windows_NT' and Exists($(OutputPath))"
  >

    <Exec Command="find '$(OutputPath)' -name &quot;*.exe&quot; -exec chmod &quot;+x&quot; '{}' ';'" />
    <Exec Command="find '$(OutputPath)' -name &quot;*&quot; -exec chmod &quot;+r&quot; '{}' ';'" />

  </Target>

  <!-- Provide default targets which can be hooked onto or overridden as necessary -->
  <Target Name="BuildAndTest" DependsOnTargets="Build;Test" />
  <Target Name="RebuildAndTest" DependsOnTargets="Rebuild;Test" />
  <Target Name="Test" />

  <Target Name="EnsureDependenciesDeployed"
          BeforeTargets="Build">
    <MSBuild Projects="$(RepoRoot)\targets\DeployDependencies.proj"
             Targets="DeployDependencies"
             BuildInParallel="true" />
  </Target>
          
  <Target Name="EnsurePrerequisitesCopied"
          BeforeTargets="Build"
          Condition="'$(IsTestProject)' == 'true'">
    <MSBuild Projects="$(RepoRoot)\targets\CopyTestPrerequisites.proj"
             Targets="CopyPrerequisites"
             BuildInParallel="true" />
  </Target>

  <Target Name="Test"
          DependsOnTargets="Build;EnsurePrerequisitesCopied"
          Condition="'$(IsTestProject)' == 'true'">
    <!-- Exec the console runner instead of using the MSBuild runner,
         because our tests have dependencies on being run as x86. -->
    <!-- Noshadow because our assemblies do not pass the checks for it
         (due to open source signing). -->
    <!-- No parallel execution because most of our tests do bad things
         with state.  They were passing because MSTest was serial. -->

    <!-- Run tests on the full framework -->
    <Exec Command="$(PackagesDir)\xunit.runner.console.$(XunitVersion)\tools\xunit.console.x86.exe @(MainAssembly, ' ') -noshadow -parallel none -xml %(MainAssembly.FullPath)_TestResults.xml -html %(MainAssembly.FullPath)_TestResults.html > %(MainAssembly.FullPath)_stdout.txt"
          Condition="'$(NetCoreBuild)' != 'true'" />

    <!-- Run tests using coreclr.  Ignore warnings/errors generated by tests to stderr. -->
    <Exec Command="$(OutputPath)corerun.exe $(OutputPath)xunit.console.netcore.exe @(MainAssembly, ' ') -noshadow -parallel none -notrait &quot;CrashesOnNetCore=true&quot; -xml %(MainAssembly.FullPath)_core_TestResults.xml > %(MainAssembly.FullPath)_core_stdout.txt"
          IgnoreStandardErrorWarningFormat="true"
          Condition="'$(NetCoreBuild)' == 'true'" />
  </Target>

  <Import Project="$(NuGetConfigDir)\packageLoad.targets" />

</Project>
