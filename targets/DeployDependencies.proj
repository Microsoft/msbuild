<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="DeployDependencies" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\dir.props" />

  <Target Name="CopyPackageContent">
    <ItemGroup>
      <!-- We want the list of files *after* restore, which happens
           early in build, so this item can't be defined outside of a
           target. -->
      <NuspecFilesInPackagesDir Include="$(PackagesDir)\**\*.nupkg" />
      <PackagesFoldersInPackagesDir Include="@(NuspecFilesInPackagesDir->'%(RootDir)%(Directory)')" />

      <!-- For each package, get its content files. -->
      <ContentFilesFromPackage Include="%(PackagesFoldersInPackagesDir.Identity)content\**\*.*" />
      <DestinationFilesFromPackage Include="@(ContentFilesFromPackage->'$(OutputPath)\%(RecursiveDir)%(Filename)%(Extension)')" />
    </ItemGroup>
    <Copy SourceFiles="@(ContentFilesFromPackage)"
          DestinationFiles="@(DestinationFilesFromPackage)"
          SkipUnchangedFiles="true"
          />
  </Target>

  <UsingTask TaskName="Microsoft.NuGet.Build.Tasks.ResolveNuGetPackageAssets" AssemblyFile="$(MSBuildExtensionsPath32)\Microsoft\NuGet\Microsoft.NuGet.Build.Tasks.dll" />

  <PropertyGroup>
    <RuntimeProjectJson>$(MSBuildThisFileDirectory)\runtime.project.json</RuntimeProjectJson>
    <RuntimeProjectLockJson>$(MSBuildThisFileDirectory)\runtime.project.lock.json</RuntimeProjectLockJson>
    <RestoreRuntimePackagesCommand>"$(NuGetToolPath)" restore $(RuntimeProjectJson)</RestoreRuntimePackagesCommand>
    <RuntimeDirectory Condition="'$(RuntimeDirectory)' ==''">$(OutputPath)</RuntimeDirectory>
    <!-- Put $(RuntimeStamp) in $(RuntimeDir) to make deleting the directory
         do the right thing.
    -->
    <RuntimeStamp>$(RuntimeDirectory)\runtime.stamp</RuntimeStamp>
    <NuGetRuntimeIdentifier>$(RuntimeSystem)-$(RuntimeArchitecture)</NuGetRuntimeIdentifier>
  </PropertyGroup>

  <Target Name="RestoreRuntimePackages"
          Inputs="$(NuGetToolPath);$(RuntimeProjectJson)"
          Outputs="$(RuntimeStamp)"
          >

    <Message Importance="High" Text="Restoring NuGet packages..." />
    <Exec Command="$(RestoreRuntimePackagesCommand)" StandardOutputImportance="Low" />

    <!-- This is just a "stamp" file, serving no purpose besides indicating
         that the target has been run since $(RuntimeProjectJson) was last
         updated.  The reason we can't use $(RuntimeProjectLockJson) for this
         is that, since $(RuntimeProjectJson) and $(RuntimeProjectLockJson)
         are both under version control, their timestamps are left in an
         indeterminate order by various operations, such as "git clone",
         "git pull", and "git checkout".
    -->
    <Touch Files="$(RuntimeStamp)" AlwaysCreate="true" />
  </Target>

  <Target Name="DeployRuntime"
          DependsOnTargets="RestoreRuntimePackages"
          >
    <ResolveNuGetPackageAssets AllowFallbackOnTargetSelection="false"
                               IncludeFrameworkReferences="false"
                               NuGetPackagesDirectory=""
                               RuntimeIdentifier="$(NuGetRuntimeIdentifier)"
                               ProjectLanguage=""
                               ProjectLockFile="$(RuntimeProjectLockJson)"
                               TargetMonikers="DNXCore,Version=v5.0">

      <!--<Output TaskParameter="ResolvedAnalyzers" ItemName="Analyzer" />-->
      <Output TaskParameter="ResolvedCopyLocalItems" ItemName="ResolvedRuntimeFiles" />
      <!--<Output TaskParameter="ResolvedReferences" ItemName="_ReferencesFromNuGetPackages" />
      <Output TaskParameter="ReferencedPackages" ItemName="ReferencedNuGetPackages" />-->
    </ResolveNuGetPackageAssets>

    <Copy SourceFiles="@(ResolvedRuntimeFiles)"
          DestinationFolder="$(RuntimeDirectory)"
          SkipUnchangedFiles="true"
          />

  </Target>

  <Target Name="DeployDependencies"
          DependsOnTargets="CopyPackageContent;DeployRuntime" />

</Project>
